# © 2025 Casey Koons All rights reserved
# Argo Build Rules
# Compilation patterns, libraries, binaries, components

# Create necessary directories
directories:
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(LOG_DIR)
	@mkdir -p $(SESSION_DIR)

# Generate stub implementations
$(BUILD_DIR)/stubs.c:
	@echo "/* © 2025 Casey Koons All rights reserved */" > $@
	@echo "/* Temporary stub implementations */" >> $@
	@echo "" >> $@
	@echo "#include <stdio.h>" >> $@
	@echo "#include <stdbool.h>" >> $@
	@echo "#include <stddef.h>" >> $@
	@echo "#include <stdint.h>" >> $@
	@echo "#include \"argo_ci_defaults.h\"" >> $@
	@echo "#include \"argo_ollama.h\"" >> $@
	@echo "#include \"argo_claude.h\"" >> $@
	@echo "" >> $@
	@echo "/* CI defaults stubs */" >> $@
	@echo "const ci_model_config_t* ci_get_model_defaults(const char* model) {" >> $@
	@echo "    (void)model;" >> $@
	@echo "    return NULL;" >> $@
	@echo "}" >> $@
	@echo "" >> $@
	@echo "/* Ollama stubs */" >> $@
	@echo "#include <sys/socket.h>" >> $@
	@echo "#include <sys/time.h>" >> $@
	@echo "#include <netinet/in.h>" >> $@
	@echo "#include <arpa/inet.h>" >> $@
	@echo "#include <unistd.h>" >> $@
	@echo "#include <fcntl.h>" >> $@
	@echo "" >> $@
	@echo "bool ollama_is_running(void) {" >> $@
	@echo "    /* Try to connect to Ollama */" >> $@
	@echo "    int sock = socket(AF_INET, SOCK_STREAM, 0);" >> $@
	@echo "    if (sock < 0) return false;" >> $@
	@echo "" >> $@
	@echo "    struct sockaddr_in addr;" >> $@
	@echo "    addr.sin_family = AF_INET;" >> $@
	@echo "    addr.sin_port = htons(11434);" >> $@
	@echo "    addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");" >> $@
	@echo "" >> $@
	@echo "    /* Set timeout for connect */" >> $@
	@echo "    struct timeval tv = {1, 0};" >> $@
	@echo "    setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));" >> $@
	@echo "" >> $@
	@echo "    int result = connect(sock, (struct sockaddr*)&addr, sizeof(addr));" >> $@
	@echo "    close(sock);" >> $@
	@echo "    return result == 0;" >> $@
	@echo "}" >> $@
	@echo "" >> $@
	@echo "/* Claude stubs */" >> $@
	@echo "bool claude_is_available(void) {" >> $@
	@echo "    /* Check if claude CLI exists */" >> $@
	@echo "    return false;  /* For now, assume not available */" >> $@
	@echo "}" >> $@
	@echo "/* claude_code functions are now in argo_claude_code.c */" >> $@
	@echo "ci_provider_t* claude_code_create_provider(const char* ci_name);" >> $@
	@echo "size_t claude_get_memory_usage(ci_provider_t* provider) {" >> $@
	@echo "    (void)provider;" >> $@
	@echo "    return 0;" >> $@
	@echo "}" >> $@
	@echo "" >> $@
	@echo "/* Error strings now in argo_error.c - no stub needed */" >> $@

# Compile source files (handle subdirectories)
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Compile test files from unit directory
$(BUILD_DIR)/%.o: $(TEST_UNIT_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Compile test files from integration directory
$(BUILD_DIR)/%.o: $(TEST_INTEGRATION_DIR)/%.c
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Compile stub file
$(BUILD_DIR)/stubs.o: $(BUILD_DIR)/stubs.c
	$(CC) $(CFLAGS) -c $< -o $@

# Build core library (foundation + providers)
$(CORE_LIB): $(FOUNDATION_OBJECTS) $(PROVIDER_OBJECTS) $(STUB_OBJECTS)
	ar rcs $@ $^
	@echo "Created core library: $@"

# Build daemon library
$(DAEMON_LIB): $(DAEMON_OBJECTS)
	ar rcs $@ $^
	@echo "Created daemon library: $@"

# Build workflow library
$(WORKFLOW_LIB): $(WORKFLOW_OBJECTS)
	ar rcs $@ $^
	@echo "Created workflow library: $@"

# Build daemon binary (needs workflow + core + daemon)
$(DAEMON_BINARY): $(DAEMON_SOURCE) $(WORKFLOW_LIB) $(CORE_LIB) $(DAEMON_LIB)
	$(CC) $(CFLAGS) $< $(DAEMON_LIB) $(WORKFLOW_LIB) $(CORE_LIB) -o $@ $(LDFLAGS)
	@echo "Built daemon: $@"

# Build workflow executor binary (needs workflow + core)
$(WORKFLOW_EXECUTOR_BINARY): $(WORKFLOW_EXECUTOR_SOURCE) $(WORKFLOW_LIB) $(CORE_LIB)
	@mkdir -p bin
	$(CC) $(CFLAGS) $< $(WORKFLOW_LIB) $(CORE_LIB) -o $@ $(LDFLAGS)
	@echo "Built workflow executor: $@"

# Build script executables into bin/utils/ (need core + daemon)
bin/utils/%: $(SCRIPT_DIR)/utils/%.c $(CORE_LIB) $(DAEMON_LIB)
	@mkdir -p bin/utils
	$(CC) $(CFLAGS) $< $(DAEMON_LIB) $(CORE_LIB) -o $@ $(LDFLAGS)
	@ln -sf ../$@ $(SCRIPT_DIR)/$(@F)
	@echo "Built utility: $@"

# Build test executables into bin/tests/
bin/tests/%: $(OBJECTS) $(BUILD_DIR)/%.o $(STUB_OBJECTS)
	@mkdir -p bin/tests
	$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS)

# Build harness executables into bin/tests/
bin/tests/harness_%: $(TEST_INTEGRATION_DIR)/harness_%.c $(CORE_LIB)
	@mkdir -p bin/tests
	@echo "Building harness_$*..."
	@$(CC) $(CFLAGS) $< $(CORE_LIB) -o $@ $(LDFLAGS)

# Build workflow loader test (needs workflow library)
$(WORKFLOW_LOADER_TEST_TARGET): $(TEST_UNIT_DIR)/test_workflow_loader.c $(WORKFLOW_LIB) $(CORE_LIB)
	@mkdir -p bin/tests
	@echo "Building test_workflow_loader..."
	@$(CC) $(CFLAGS) $< $(WORKFLOW_LIB) $(CORE_LIB) -o $@ $(LDFLAGS)

# Component builds
arc: $(CORE_LIB) $(DAEMON_LIB)
	@$(MAKE) -C arc

ci: $(CORE_LIB) $(DAEMON_LIB)
	@$(MAKE) -C ci

ui: arc
	@$(MAKE) -C ui/argo-term

ui-argo-term: arc
	@$(MAKE) -C ui/argo-term

all-components: $(CORE_LIB) $(DAEMON_LIB) $(DAEMON_BINARY) arc ci ui arc-completions

# Install arc shell completions
arc-completions:
	@$(MAKE) -C arc install-completion

# Build just the scripts
scripts: $(CORE_LIB) $(SCRIPT_TARGETS)

# Stress test builds (from tests/stress/)
$(CONCURRENCY_STRESS_TEST_TARGET): tests/stress/test_concurrency_stress.c $(DAEMON_LIB) $(CORE_LIB)
	@mkdir -p bin/tests
	@echo "Building concurrency stress test..."
	@$(CC) $(CFLAGS) -I./tests/stress $< $(DAEMON_LIB) $(CORE_LIB) -o $@ $(LDFLAGS)

$(SOAK_TEST_TARGET): tests/stress/test_soak.c $(DAEMON_LIB) $(CORE_LIB)
	@mkdir -p bin/tests
	@echo "Building soak test..."
	@$(CC) $(CFLAGS) -I./tests/stress $< $(DAEMON_LIB) $(CORE_LIB) -o $@ $(LDFLAGS)

# Stress test collection
stress-tests: $(CONCURRENCY_STRESS_TEST_TARGET) $(SOAK_TEST_TARGET)
	@echo "Built all stress tests"

# Harness collection
harnesses: $(HARNESS_INIT_BASIC) $(HARNESS_ENV_INSPECT) $(HARNESS_REINIT) $(HARNESS_INIT_ERROR) $(HARNESS_SOCKET) $(HARNESS_TERMINAL) $(HARNESS_CI_INTERACTIVE)
	@echo "Built all test harnesses"
