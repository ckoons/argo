#compdef arc
# Â© 2025 Casey Koons. All rights reserved.
# Zsh completion for arc CLI
#
# Installation:
#   mkdir -p ~/.zsh/completions
#   cp _arc ~/.zsh/completions/
#
# Add to ~/.zshrc:
#   fpath=(~/.zsh/completions $fpath)
#   autoload -U compinit && compinit

_arc() {
    local curcontext="$curcontext" state line
    typeset -A opt_args

    local -a commands
    commands=(
        'help:Show help information'
        'start:Start workflow from template'
        'list:List active workflows'
        'templates:List available templates'
        'status:Show workflow status'
        'states:Show all workflow states'
        'attach:Attach to workflow logs'
        'pause:Pause running workflow'
        'resume:Resume paused workflow'
        'abandon:Stop and remove workflow'
        'test:Run template tests'
        'docs:Show template documentation'
    )

    _arguments -C \
        '1: :->cmds' \
        '2: :->args' \
        && return 0

    case $state in
        cmds)
            _describe -t commands 'arc command' commands
            ;;
        args)
            case ${words[2]} in
                start)
                    # arc start <template>
                    local -a templates
                    templates=(${(f)"$(arc templates 2>/dev/null | awk '
                        /^  [a-zA-Z]/ && !/^  arc/ { print $1 }
                    ')"})
                    _describe -t templates 'template' templates
                    ;;
                status|attach|pause|resume|abandon)
                    # arc <command> <workflow_id>
                    local -a workflows
                    workflows=(${(f)"$(arc list 2>/dev/null | awk '
                        /^  wf_/ { print $1 }
                    ')"})
                    _describe -t workflows 'workflow' workflows
                    ;;
                docs|test)
                    # arc docs/test <template>
                    local -a templates
                    templates=(${(f)"$(arc templates 2>/dev/null | awk '
                        /^  [a-zA-Z]/ && !/^  arc/ { print $1 }
                    ')"})
                    _describe -t templates 'template' templates
                    ;;
                help)
                    # arc help <command>
                    _describe -t commands 'command' commands
                    ;;
            esac
            ;;
    esac
}

_arc "$@"
