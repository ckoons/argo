#!/bin/bash
# Â© 2025 Casey Koons All rights reserved
#
# generate_architecture_md - DC tool to generate architecture.md from context.json
#
# Generates human-readable architecture documentation
#
# Usage: generate_architecture_md <context.json>
# Updates: architecture.file in context.json

context_file="$1"

if [[ ! -f "$context_file" ]]; then
    echo "Error: Context file not found: $context_file" >&2
    exit 1
fi

# Check if architecture is validated
validated=$(jq -r '.architecture.validated' "$context_file")
if [[ "$validated" != "true" ]]; then
    echo "Warning: Architecture not validated yet" >&2
fi

# Extract architecture data
session_dir=$(dirname "$context_file")
output_file="$session_dir/architecture.md"

project_name=$(jq -r '.project_name' "$context_file")
platform=$(jq -r '.requirements.platform // "Not specified"' "$context_file")

# Extract components
components=$(jq -r '.architecture.components[]? // empty' "$context_file" 2>/dev/null)

# Extract interfaces
interfaces=$(jq -r '.architecture.interfaces[]? // empty' "$context_file" 2>/dev/null)

# Extract technologies
technologies=$(jq -r '.architecture.technologies[]? // empty' "$context_file" 2>/dev/null)

# Extract design decisions
decisions=$(jq -r '.architecture.design_decisions[]? // empty' "$context_file" 2>/dev/null)

# Generate architecture.md
cat > "$output_file" <<EOF
# Architecture: $project_name

## Overview

Platform: $platform

## Components

EOF

# Add components
if [[ -n "$components" ]]; then
    while IFS= read -r component; do
        # Try to extract structured component info
        name=$(echo "$component" | jq -r '.name // .' 2>/dev/null || echo "$component")
        description=$(echo "$component" | jq -r '.description // empty' 2>/dev/null)

        echo "### $name" >> "$output_file"
        if [[ -n "$description" ]]; then
            echo "$description" >> "$output_file"
        fi
        echo "" >> "$output_file"
    done <<< "$components"
else
    echo "No components specified yet." >> "$output_file"
    echo "" >> "$output_file"
fi

# Add interfaces
cat >> "$output_file" <<EOF

## Interfaces

EOF

if [[ -n "$interfaces" ]]; then
    while IFS= read -r interface; do
        # Try to extract structured interface info
        name=$(echo "$interface" | jq -r '.name // .' 2>/dev/null || echo "$interface")
        description=$(echo "$interface" | jq -r '.description // empty' 2>/dev/null)

        echo "### $name" >> "$output_file"
        if [[ -n "$description" ]]; then
            echo "$description" >> "$output_file"
        fi
        echo "" >> "$output_file"
    done <<< "$interfaces"
else
    echo "No interfaces specified (single-component system)." >> "$output_file"
    echo "" >> "$output_file"
fi

# Add technologies
cat >> "$output_file" <<EOF

## Technology Stack

EOF

if [[ -n "$technologies" ]]; then
    while IFS= read -r tech; do
        echo "- $tech" >> "$output_file"
    done <<< "$technologies"
else
    echo "No specific technologies specified yet." >> "$output_file"
fi
echo "" >> "$output_file"

# Add design decisions
if [[ -n "$decisions" ]]; then
    cat >> "$output_file" <<EOF

## Design Decisions

EOF
    while IFS= read -r decision; do
        echo "- $decision" >> "$output_file"
    done <<< "$decisions"
    echo "" >> "$output_file"
fi

# Add generation timestamp
cat >> "$output_file" <<EOF

---
*Generated: $(date)*
EOF

# Update context.json with file path
temp_file=$(mktemp)
jq --arg file "$output_file" \
   '.architecture.file = $file |
    .metadata.last_updated = now | .metadata.last_updated |= todate' \
   "$context_file" > "$temp_file"

mv "$temp_file" "$context_file"

echo "Generated: $output_file"
exit 0
