#!/bin/bash
# Â© 2025 Casey Koons All rights reserved
#
# generate_tasks - DC tool to generate tasks.json from architecture
#
# Generates task breakdown for build phase
#
# Usage: generate_tasks <context.json>
# Updates: architecture.tasks_file in context.json

context_file="$1"

if [[ ! -f "$context_file" ]]; then
    echo "Error: Context file not found: $context_file" >&2
    exit 1
fi

# Check if architecture is validated
validated=$(jq -r '.architecture.validated' "$context_file")
if [[ "$validated" != "true" ]]; then
    echo "Warning: Architecture not validated yet" >&2
fi

# Extract architecture data
session_dir=$(dirname "$context_file")
output_file="$session_dir/tasks.json"

project_name=$(jq -r '.project_name' "$context_file")
platform=$(jq -r '.requirements.platform // "unknown"' "$context_file")

# Extract components (as JSON array)
components=$(jq -r '.architecture.components' "$context_file")

# Build tasks.json
# Each component gets:
# 1. Setup task (create files/directories)
# 2. Implementation task (write code)
# 3. Test task (create tests)

tasks_json='{"project_name": "'"$project_name"'", "platform": "'"$platform"'", "tasks": []}'

# Add setup task
tasks_json=$(echo "$tasks_json" | jq '.tasks += [{
  "id": "setup",
  "name": "Setup project structure",
  "type": "setup",
  "description": "Create directory structure and configuration files",
  "status": "pending"
}]')

# Add tasks for each component
component_count=$(echo "$components" | jq 'length')
if [[ "$component_count" -gt 0 ]]; then
    for i in $(seq 0 $((component_count - 1))); do
        component=$(echo "$components" | jq -r ".[$i]")

        # Try to extract structured component info
        component_name=$(echo "$component" | jq -r '.name // .' 2>/dev/null || echo "$component")
        component_description=$(echo "$component" | jq -r '.description // ""' 2>/dev/null)

        # Sanitize component name for task ID
        task_id=$(echo "$component_name" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | tr -cd 'a-z0-9_')

        # Implementation task
        tasks_json=$(echo "$tasks_json" | jq --arg id "implement_${task_id}" \
                                              --arg name "Implement $component_name" \
                                              --arg desc "$component_description" \
                                              '.tasks += [{
          "id": $id,
          "name": $name,
          "type": "implementation",
          "component": $name,
          "description": $desc,
          "status": "pending",
          "depends_on": ["setup"]
        }]')

        # Test task
        tasks_json=$(echo "$tasks_json" | jq --arg id "test_${task_id}" \
                                              --arg name "Test $component_name" \
                                              --arg impl_id "implement_${task_id}" \
                                              '.tasks += [{
          "id": $id,
          "name": $name,
          "type": "test",
          "component": $name,
          "status": "pending",
          "depends_on": [$impl_id]
        }]')
    done
fi

# Add integration task (if multiple components)
if [[ "$component_count" -gt 1 ]]; then
    # Collect all test task IDs for dependencies
    test_task_ids=$(echo "$tasks_json" | jq -r '[.tasks[] | select(.type == "test") | .id] | join(",")' | sed 's/,/","/g')

    tasks_json=$(echo "$tasks_json" | jq --arg deps "[$test_task_ids]" \
                                          '.tasks += [{
      "id": "integration",
      "name": "Integration testing",
      "type": "integration",
      "description": "Test component interactions",
      "status": "pending",
      "depends_on": ($deps | fromjson)
    }]')
fi

# Add documentation task
all_impl_ids=$(echo "$tasks_json" | jq -r '[.tasks[] | select(.type == "implementation") | .id] | join(",")' | sed 's/,/","/g')
tasks_json=$(echo "$tasks_json" | jq --arg deps "[$all_impl_ids]" \
                                      '.tasks += [{
  "id": "documentation",
  "name": "Generate documentation",
  "type": "documentation",
  "description": "Create user and developer documentation",
  "status": "pending",
  "depends_on": ($deps | fromjson)
}]')

# Write tasks.json
echo "$tasks_json" | jq '.' > "$output_file"

# Update context.json with file path
temp_file=$(mktemp)
jq --arg file "$output_file" \
   '.architecture.tasks_file = $file |
    .metadata.last_updated = now | .metadata.last_updated |= todate' \
   "$context_file" > "$temp_file"

mv "$temp_file" "$context_file"

# Display summary
task_count=$(echo "$tasks_json" | jq '.tasks | length')
echo "Generated: $output_file"
echo "Tasks created: $task_count"
echo "  - 1 setup task"
echo "  - $((component_count * 2)) component tasks (implementation + tests)"
if [[ "$component_count" -gt 1 ]]; then
    echo "  - 1 integration task"
fi
echo "  - 1 documentation task"

exit 0
