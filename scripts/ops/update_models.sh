#!/bin/bash
# © 2025 Casey Koons All rights reserved
#
# Script to query API providers and generate argo_local_models.h
# with current model offerings

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
OUTPUT_FILE="$PROJECT_ROOT/include/argo_local_models.h"
KEYS_FILE="$PROJECT_ROOT/include/argo_api_keys.h"

echo "Argo Model Update Script"
echo "========================"
echo ""

# Check if API keys exist
if [ ! -f "$KEYS_FILE" ]; then
    echo "Error: API keys file not found: $KEYS_FILE"
    exit 1
fi

# Source the API keys (extract from C defines)
CLAUDE_KEY=$(grep "ANTHROPIC_API_KEY" "$KEYS_FILE" | sed 's/.*"\(.*\)".*/\1/')
OPENAI_KEY=$(grep "OPENAI_API_KEY" "$KEYS_FILE" | sed 's/.*"\(.*\)".*/\1/')
GEMINI_KEY=$(grep "GEMINI_API_KEY" "$KEYS_FILE" | sed 's/.*"\(.*\)".*/\1/')
GROK_KEY=$(grep "GROK_API_KEY" "$KEYS_FILE" | sed 's/.*"\(.*\)".*/\1/')
DEEPSEEK_KEY=$(grep "DEEPSEEK_API_KEY" "$KEYS_FILE" | sed 's/.*"\(.*\)".*/\1/')
OPENROUTER_KEY=$(grep "OPENROUTER_API_KEY" "$KEYS_FILE" | sed 's/.*"\(.*\)".*/\1/')

TODAY=$(date +%Y-%m-%d)

echo "Querying API providers for current models..."
echo ""

# Query Claude
echo -n "Checking Claude models... "
CLAUDE_MODELS=$(curl -s https://api.anthropic.com/v1/models \
    -H "x-api-key: $CLAUDE_KEY" \
    -H "anthropic-version: 2023-06-01" 2>/dev/null || echo '{"data":[]}')
CLAUDE_LATEST=$(echo "$CLAUDE_MODELS" | python3 -c "import sys, json; d=json.load(sys.stdin); print(d['data'][0]['id'] if d.get('data') else 'claude-sonnet-4-5-20250929')" 2>/dev/null)
echo "✓ ($CLAUDE_LATEST)"

# Query OpenAI
echo -n "Checking OpenAI models... "
OPENAI_MODELS=$(curl -s https://api.openai.com/v1/models \
    -H "Authorization: Bearer $OPENAI_KEY" 2>/dev/null || echo '{"data":[]}')
OPENAI_LATEST=$(echo "$OPENAI_MODELS" | python3 -c "import sys, json; d=json.load(sys.stdin); gpt4=[m['id'] for m in d.get('data',[]) if m['id'].startswith('gpt-4o')]; print(gpt4[0] if gpt4 else 'gpt-4o')" 2>/dev/null)
echo "✓ ($OPENAI_LATEST)"

# Query Gemini
echo -n "Checking Gemini models... "
GEMINI_MODELS=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models?key=$GEMINI_KEY" 2>/dev/null || echo '{"models":[]}')
GEMINI_LATEST=$(echo "$GEMINI_MODELS" | python3 -c "import sys, json; d=json.load(sys.stdin); models=[m['name'].replace('models/','') for m in d.get('models',[]) if 'gemini' in m['name'] and 'flash' in m['name']]; print(models[0] if models else 'gemini-2.5-flash')" 2>/dev/null)
echo "✓ ($GEMINI_LATEST)"

# Grok (use default, no public model listing API)
GROK_LATEST="grok-3"
echo "Checking Grok models... ✓ ($GROK_LATEST - using default)"

# DeepSeek (use default, no public model listing API)
DEEPSEEK_LATEST="deepseek-chat"
echo "Checking DeepSeek models... ✓ ($DEEPSEEK_LATEST - using default)"

# OpenRouter
echo -n "Checking OpenRouter models... "
OPENROUTER_MODELS=$(curl -s https://openrouter.ai/api/v1/models \
    -H "Authorization: Bearer $OPENROUTER_KEY" 2>/dev/null || echo '{"data":[]}')
OPENROUTER_LATEST=$(echo "$OPENROUTER_MODELS" | python3 -c "import sys, json; d=json.load(sys.stdin); claude=[m['id'] for m in d.get('data',[]) if 'anthropic/claude-sonnet-4' in m['id']]; print(claude[0] if claude else 'anthropic/claude-sonnet-4.5')" 2>/dev/null)
echo "✓ ($OPENROUTER_LATEST)"

echo ""
echo "Generating $OUTPUT_FILE..."

# Generate the header file
cat > "$OUTPUT_FILE" << EOF
/* © 2025 Casey Koons All rights reserved */
/* Auto-generated by scripts/update_models.sh on $TODAY */
/* DO NOT EDIT MANUALLY - regenerate with: make update-models */

#ifndef ARGO_LOCAL_MODELS_H
#define ARGO_LOCAL_MODELS_H

/*
 * Current model preferences from API providers
 * This file is git-ignored and overrides defaults in argo_api_providers.h
 */

/* Anthropic Claude Models - Verified: $TODAY */
#define CLAUDE_DEFAULT_MODEL "$CLAUDE_LATEST"

/* OpenAI Models - Verified: $TODAY */
#define OPENAI_DEFAULT_MODEL "$OPENAI_LATEST"

/* Google Gemini Models - Verified: $TODAY */
#define GEMINI_DEFAULT_MODEL "$GEMINI_LATEST"

/* xAI Grok Models - Verified: $TODAY */
#define GROK_DEFAULT_MODEL "$GROK_LATEST"

/* DeepSeek Models - Verified: $TODAY */
#define DEEPSEEK_DEFAULT_MODEL "$DEEPSEEK_LATEST"

/* OpenRouter Models - Verified: $TODAY */
#define OPENROUTER_DEFAULT_MODEL "$OPENROUTER_LATEST"

#endif /* ARGO_LOCAL_MODELS_H */
EOF

echo "✓ Done!"
echo ""
echo "Model configuration updated:"
echo "  Claude:     $CLAUDE_LATEST"
echo "  OpenAI:     $OPENAI_LATEST"
echo "  Gemini:     $GEMINI_LATEST"
echo "  Grok:       $GROK_LATEST"
echo "  DeepSeek:   $DEEPSEEK_LATEST"
echo "  OpenRouter: $OPENROUTER_LATEST"
echo ""
echo "To use these models, rebuild with: make clean && make"